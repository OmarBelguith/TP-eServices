{
    "docs": [
        {
            "location": "/", 
            "text": "Travaux Pratiques eServices\n\n\nGL5 - INSAT\n\n\n\n\n\n\nCours Disponible ici: \nhttp://liliasfaxi.wix.com/liliasfaxi/eservices\n\n\nPiazza : \nhttps://piazza.com/class/j3k0yr6cyex4n8\n\n\nRepo Github :  \nhttps://github.com/INSATunisia\n\n\n\n\nOverview\n\n\nL'objectif de ce cours est d'initier les \u00e9tudiants aux architectures \u00e0 base de services en g\u00e9n\u00e9ral. Le cours va concerner principalement les points suivants:\n\n\n\n\nL'architecture orient\u00e9e services (SOA: Service-Oriented Architecture)\n\n\nLa composition de services: orchestration et chor\u00e9graphie\n\n\nLes bus de services (ESB: Enterprise Service Bus)\n\n\nLes Microservices\n\n\nLe API Management\n\n\nL'architecture orient\u00e9e web (WOA: Web-Oriented Architecture)\n\n\n\n\nCe cours comporte cinq s\u00e9ances de travaux pratiques:\n\n\n\n\nTP1: Manipulation des services SOAP et REST avec Talend\n\n\nTP2: Orchestration des services avec Activiti\n\n\nTP3: Mise en place d'un ESB avec Talend ESB\n\n\nTP4: Microservices\n\n\nTP5: API Management avec Anypoint", 
            "title": "Home"
        }, 
        {
            "location": "/#travaux-pratiques-eservices", 
            "text": "", 
            "title": "Travaux Pratiques eServices"
        }, 
        {
            "location": "/#gl5-insat", 
            "text": "Cours Disponible ici:  http://liliasfaxi.wix.com/liliasfaxi/eservices  Piazza :  https://piazza.com/class/j3k0yr6cyex4n8  Repo Github :   https://github.com/INSATunisia", 
            "title": "GL5 - INSAT"
        }, 
        {
            "location": "/#overview", 
            "text": "L'objectif de ce cours est d'initier les \u00e9tudiants aux architectures \u00e0 base de services en g\u00e9n\u00e9ral. Le cours va concerner principalement les points suivants:   L'architecture orient\u00e9e services (SOA: Service-Oriented Architecture)  La composition de services: orchestration et chor\u00e9graphie  Les bus de services (ESB: Enterprise Service Bus)  Les Microservices  Le API Management  L'architecture orient\u00e9e web (WOA: Web-Oriented Architecture)   Ce cours comporte cinq s\u00e9ances de travaux pratiques:   TP1: Manipulation des services SOAP et REST avec Talend  TP2: Orchestration des services avec Activiti  TP3: Mise en place d'un ESB avec Talend ESB  TP4: Microservices  TP5: API Management avec Anypoint", 
            "title": "Overview"
        }, 
        {
            "location": "/tp1/", 
            "text": "TP1 - Services Web REST et SOAP avec Talend\n\n\n\n\nObjectifs du TP\n\n\nCr\u00e9ation et consommation de web services SOAP et REST en utilisant l'outil Talend.\n\n\nOutils et Versions\n\n\n\n\nTalend Open Studio for ESB\n Version: 6.3.0\n\n\nJava\n Version 1.8.0_121\n\n\nMySQL\n Version 14.14 Distrib 5.6.34\n\n\nSOAPUI\n Version 5.3.0\n\n\n\n\nTalend ESB\n\n\nTalend ESB est une solution l\u00e9g\u00e8re, robuste et modulaire pour la cr\u00e9ation de services\nweb s\u00e9curis\u00e9s ainsi que pour l\u2019int\u00e9gration d\u2019applications nouvelles ou existantes.\nTalend participe au d\u00e9veloppement des composants ESB \u00e0 travers la communaut\u00e9\nApache. Il collabore avec un grand nombre de d\u00e9veloppeurs de la communaut\u00e9 Apache\net a fait plusieurs contributions aux projets Apache.\nTalend fournit:\n\n\n\n\nUn courtier de messages \u00e0 haute performance.\n\n\nDes options de d\u00e9ploiement flexibles\n\n\nDes outils de d\u00e9veloppement pour Eclipse\n\n\nUne interface utilisateur pour l\u2019int\u00e9gration et la m\u00e9diation d\u2019applications\n\n\nSupport pour les services web SOAP et REST\n\n\nLa m\u00e9diation et le routage\n\n\nSupport pour le failover, le monitoring et la s\u00e9curit\u00e9\n\n\n\n\nL\u2019environnement d\u2019ex\u00e9cution standard de Talend ESB est un conteneur OSGi.\nL\u2019impl\u00e9mentation OSGi fournie avec Talend ESB est Apache Karaf, avec Eclipse Equinox\ncomme environnement d\u2019ex\u00e9cution OSGi. Elle fournit un conteneur l\u00e9ger dans lequel les\ndiff\u00e9rents composants et applications peuvent \u00eatre d\u00e9ploy\u00e9es.\n\n\nTalend Open Studio for ESB\n\n\nTalend Open Studio for ESB (TOS-ESB) fournit une interface graphique de\nd\u00e9veloppement pour impl\u00e9menter, compiler, tester et publier des services Web Java, des\napplications REST, des services de donn\u00e9es et des routes de messages.\nLe d\u00e9ploiement d\u2019applications avec TOS-ESB utilise principalement les trois blocs\nrepr\u00e9sent\u00e9s dans cette figure:\n\n\n\n\n\n\nLe bloc bleu repr\u00e9sente l\u2019API Talend Studio, o\u00f9 il est possible d\u2019int\u00e9grer des\ndonn\u00e9es, des services ou des applications\n\n\nLes blocs rouges repr\u00e9sentent un ou plusieurs environnements d\u2019ex\u00e9cution Talend\nd\u00e9ploy\u00e9s dans votre syst\u00e8me d\u2019information. Il vous permet de d\u00e9ployer et\nd\u2019ex\u00e9cuter les Jobs, les routes et les services cr\u00e9\u00e9s dans Talend Studio. Il est\npossible d\u2019avoir plusieurs environnements d\u2019ex\u00e9cution, entre lesquels vous pouvez\nbasculer gr\u00e2ce \u00e0 Talend Service Locator.\n\n\nLe bloc orange est une base de donn\u00e9es de monitoring, permettant de stocker les\ninformations d\u2019ex\u00e9cution des processus et de l\u2019activit\u00e9 des services.\n\n\n\n\nL\u2019interface utilisateur de TOS-ESB se pr\u00e9sente comme suit:\n\n\n\n\n\n\n\n\n\n\nComposant\n\n\nFonctionnalit\u00e9\n\n\n\n\n\n\n\n\n\n\n\n\nLe traditionnel \nRepository\n contenant vos Jobs, services, fichiers, routes\u2026\n\n\n\n\n\n\n\n\nLa fen\u00eatre principale, repr\u00e9sentant graphiquement la composition de vos jobs et routes\n\n\n\n\n\n\n\n\nLa fen\u00eatre contenant les propri\u00e9t\u00e9s, la console d\u2019ex\u00e9cution\u2026\n\n\n\n\n\n\n\n\nLa palette des composants \u00e0 utiliser\n\n\n\n\n\n\n\n\nLes onglets pour le choix de la perspective \u00e0 utiliser\n\n\n\n\n\n\n\n\nService Web SOAP : Helloworld\n\n\nNous ne pouvons pas configurer un ESB avant de savoir cr\u00e9er, d\u00e9ployer et ex\u00e9cuter des\nservices web avec les outils Talend ESB. Nous allons donc commencer avec le\ntraditionnel Hello World. Pour cela, il faut commencer par cr\u00e9er un projet de votre choix.\nDans toute cette partie, nous nous trouverons dans la perspective Integration.\n\n\nCr\u00e9er le service SOAP\n\n\nPour cr\u00e9er un nouveau service de type SOAP:\n\n\n\n\nClic-droit sur \nServices\n de votre Repository, et choisir \nCreate Service\n. Appeler le\nservice \nHelloWorldService\n. Cliquer sur Suivant.\n\n\nOn vous propose soit de cr\u00e9er un nouveau WSDL, soit de choisir un WSDL existant. Dans notre cas, nous cr\u00e9ons un nouveau WSDL. Cliquer sur Terminer.\n\n\nUn service simple qui re\u00e7oit une cha\u00eene de caract\u00e8res et en produit une autre est\ncr\u00e9\u00e9. Une vue graphique de son WSDL s\u2019affiche.\n\n\n\n\n\n\nConfigurer le service SOAP\n\n\nPour pouvoir configurer votre service, il faut cr\u00e9er un Job. Mais d\u2019abord:\n\n\n\n\nImporter le WSDL de votre service dans votre repository. Pour cela, clic droit sur\n\nHelloWorldService\n, et choisir \nImporter les sch\u00e9mas WSDL\n. Vous retrouverez votre\nWSDL dans la partie \nMetadonn\u00e9es -\n Fichier XML\n.\n\n\nCr\u00e9er un nouveau Job pour votre service. Pour cela, clic-droit sur l\u2019op\u00e9ration \nHelloWorldServiceOperation\n (sous Services) et choisir \nAssign Job\n.\n\n\nModifier votre Job pour qu\u2019il ait l\u2019allure suivante (Le \ntLogRow\n nous permettra\nd\u2019afficher le r\u00e9sultat du service ex\u00e9cut\u00e9 sur la console avant de l\u2019envoyer au\nconsommateur):\n\n\n\n\n\n\n\n\n\n\nConfigurer votre tXMLMap pour que le \nin\n de la requ\u00eate soit transmise au \nout\n de la\nr\u00e9ponse, en lui concat\u00e9nant le c\u00e9l\u00e8bre \"Hello\". Pour cela:\n\n\n\n\nDouble clic sur votre XML Map.\n\n\nClic-droit sur \npayload\n de l\u2019entr\u00e9e, et cliquer sur \nImport from Repository\n.\n\n\nChoisir le \nHelloWorldServiceOperationRequest\n correspondant au fichier WSDL que vous avez g\u00e9n\u00e9r\u00e9.\n\n\nRefaire les m\u00eames \u00e9tapes pour le payload de la sortie, en choisissant \nHelloWorldServiceOperationResponse\n.\n\n\nRelier le \nin\n de la requ\u00eate avec le \nout\n de la r\u00e9ponse (cr\u00e9er l\u2019entr\u00e9e comme sous-\u00e9l\u00e9ment de la r\u00e9ponse)\n\n\nModifier l\u2019expression du \nout\n en ajoutant la cha\u00eene \n\u201cHello \u201c\n avant la valeur \nin\n de l\u2019entr\u00e9e.\n\n\nLe r\u00e9sultat de la XMLMap devrait ressembler \u00e0 ce qui suit:\n\n\n\nSauvegarder et quitter.\n\n\n\n\n\n\n\n\nLancer votre Job (cela permettra de publier votre service web sur le port 8090).\nV\u00e9rifier que votre fichier WSDL existe bien.\n\n\n\n\n\n\nTester le service SOAP\n\n\nIl est possible de tester votre service de plusieurs mani\u00e8res. L'une d'elles est d'utiliser un outil l\u00e9ger de test appel\u00e9 \nSOAPUI\n.\n\n\n\n\nLancer SOAPUI\n\n\nCliquer sur l'ic\u00f4ne SOAP en haut de la fen\u00eatre principale\n\n\nDonner un nom au projet (par exemple Helloworld) et entrer l'adresse du fichier WSDL du service, comme suit:\n\n\n\n\n\n\n\n\nDouble cliquer sur la requ\u00eate g\u00e9n\u00e9r\u00e9e, et remplir le \n?\n par un nom de votre choix.\n\n\nCliquer sur la fl\u00e8che verte. Le r\u00e9sultat devra ressembler au suivant:\n\n\n\n\n\n\nConsommateur du WebService SOAP\n\n\nNous allons maintenant cr\u00e9er un consommateur pour notre service avec talend open studio. Pour cela:\n\n\n\n\nCr\u00e9er un nouveau Job, que vous appellerez \nHelloWorldServiceConsumer\n.\n\n\nConcevez votre job de mani\u00e8re \u00e0 ce qu\u2019il ait l\u2019allure suivante:\n\n\n\n\n\nVoici les r\u00f4les des \u00e9l\u00e9ments que vous avez ajout\u00e9:\n\n\n* tFixedFlowInput : d\u00e9finir les entr\u00e9es \u00e0 envoyer \u00e0 votre service\n* tXMLMap : associer les entr\u00e9es d\u00e9finies aux entr\u00e9es du service\n* tESBConsumer : consommateur du service\n* tLogRow: afficher les r\u00e9ponses et/ou les fautes (s\u2019il y\u2019en a)\n\n\n\n\n\n\n\n\n\nConfigurer votre composant \ntFixedFlowInput\n. Pour cela:\n\n\n\n\nCliquer sur \nModifier le sch\u00e9ma\n et ajouter une colonne appel\u00e9e \nNom\n de type \nString\n.\n\n\nUtiliser une \nInline Table\n pour ajouter les trois cha\u00eenes en entr\u00e9e: \u201cAlice\u201d, \u201cBob\u201d et \u201cChuck\u201d.\n\n\n\n\n\n\n\n\nConfigurer votre \ntESBConsumer\n en lui donnant comme WSDL celui du service que\nvous avez cr\u00e9\u00e9. V\u00e9rifiez bien que le Endpoint soit sur le port 8090.\n\n\n\n\nConfigurer votre \ntXMLMap\n pour que la variable \nNom\n soit associ\u00e9e au \nin\n de votre\nservice.\n\n\nEx\u00e9cuter le Job, et observez le r\u00e9sultat. Votre console devrait afficher le r\u00e9sultat suivant:\n\n\n\n\n\nService Web REST : Interrogation d'une base de donn\u00e9es\n\n\nNous allons maintenant montrer comment exposer un service REST pour interroger une base de donn\u00e9es.\n\n\nCr\u00e9ation de la base de donn\u00e9es\n\n\nNous allons commencer par cr\u00e9er une base de donn\u00e9es (MySQL dans mon cas), appel\u00e9e \neservices-tp1\n avec une table, que nous appellerons \nuser\n. Cette table contient les champs \nid\n, \nfirstname\n et \nlastname\n. Remplir ensuite la base \u00e0 votre guise, de mani\u00e8re \u00e0 avoir au moins 4 entr\u00e9es.\n\n\nElle devra ressembler \u00e0 ce qui suit:\n\n\n\nAjout de la connexion \u00e0 la base avec Talend\n\n\nPour configurer une connexion \u00e0 cette base de donn\u00e9es avec Talend, suivre les \u00e9tapes suivantes:\n\n\n\n\nDans les M\u00e9tadonn\u00e9es, sous \nConnexions aux bases de donn\u00e9es\n, clic-droit, puis choisir: \nCr\u00e9er une connexion\n.\n\n\nConfigurer votre connexion. Voici un exemple:\n\n\n\n\n\n\n\n\nUne fois la connexion cr\u00e9\u00e9e, importer son sch\u00e9ma. Pour cela, clic-droit sur Metadonn\u00e9es -\n Connexions... -\n \n et choisir: \nR\u00e9cup\u00e9rer le sch\u00e9ma\n.\n\n\nS\u00e9lectionner la table \nuser\n, et v\u00e9rifier que les champs sont bien charg\u00e9s dans la partie Sch\u00e9ma.\n\n\n\n\nCr\u00e9ation du service REST\n\n\nNous allons maintenant cr\u00e9er le service REST. Pour cela, cr\u00e9er un nouveau job, qu'on appellera \nDBService\n, puis glisser les composants suivants:\n\n\n\n\ntRestRequest\n : Pour d\u00e9finir la requ\u00eate REST que le client doit appeler\n\n\nuser\n : Table de la base de donn\u00e9es. Dans la nouvelle connexion \u00e0 la base de donn\u00e9es que vous avez cr\u00e9\u00e9, sous \nSch\u00e9mas des tables\n, glisser la table \nuser\n vers le Job, puis choisir tMySQLInput dans la fen\u00eatre de choix qui appara\u00eet.\n\n\n\n\n\n\nRemarque\n\n\nJe choisis \ntMySQLInput\n car, dans mon cas, c'est une base de donn\u00e9es MySQL, et je veux juste lire son contenu, je vais donc y acc\u00e9der en entr\u00e9e (d'o\u00f9 le \nInput\n).\n\n\n\n\n\n\ntFlowToIterate\n : Pour effectuer une it\u00e9ration sur les donn\u00e9es d'entr\u00e9e et g\u00e9n\u00e8rer des variables globales.\n\n\ntXMLMap\n : Permet de router et transformer les flux entrants de la base de donn\u00e9es vers le r\u00e9sultat de la requ\u00eate.\n\n\ntRestResponse\n : Pour d\u00e9finir la r\u00e9ponse \u00e0 envoyer \u00e0 l'utilisateur suite \u00e0 sa requ\u00eate.\n\n\ntLogRow\n : Pour le log, bien s\u00fbr.\n\n\n\n\nLe job aura l'allure suivante:\n\n\n\nConfiguration du service REST\n\n\nNous d\u00e9sirons configurer le service de mani\u00e8re \u00e0 ce que, quand un consommateur appelle l'URI:\n\nhttp://localhost:8088/users?from=1\nto=3\n, le service retourne une r\u00e9ponse contenant les utilisateurs (id, nom et pr\u00e9nom) de la base de donn\u00e9es dont les ids figurent entre 1 et 3.  \n\n\nConfiguration de tRestRequest\n\n\ntRestRequest devra \u00eatre configur\u00e9 comme suit:\n\n\n\n\nLa valeur de \nEndpoint URL\n devra \u00eatre: \nhttp://localhost:8088/users\n\n\nSi vous avez connect\u00e9 le tRestRequest avec le tFlowToIterate avec un lien appel\u00e9 \ngetUsers\n, vous devriez le retrouver dans la case \nREST API Mapping\n. Sinon, cr\u00e9ez-le.\n\n\nGarder les informations par d\u00e9faut de ce mapping (m\u00e9thode GET, URI /, Produit XML ou JSON).\n\n\nEn cliquant sur \ngetUsers\n, un bouton avec trois petits points appara\u00eet. Cliquez dessus.\n\n\n\n\nAjouter les deux colonnes \nfrom\n et \nto\n repr\u00e9sentant les deux param\u00e8tres de la requ\u00eate. Prenez soin \u00e0 ce que:\n\n\n\n\nLeur type soit \nint\n\n\nLeurs valeurs par d\u00e9faut soient respectivement 1 et 3.\n\n\n\n\n\n\nRemarque\n\n\nCes valeurs seront utilis\u00e9es dans le cas o\u00f9 le consommateur n'introduit pas de param\u00e8tres.\n\n\n\n\n\n\nLeur commentaire ait la valeur: \nquery\n\n\n\n\n\n\nRemarque\n\n\nCela indique que ces champs sont des param\u00e8tres de requ\u00eate, pas d\u00e9finies dans le Path.\n\n\n\n\n\n\n\n\nConfiguration de user\n\n\nPuisque le composant \nuser\n a \u00e9t\u00e9 cr\u00e9\u00e9 \u00e0 partir de la connexion \u00e0 votre base MySQL, il contient d\u00e9j\u00e0 les informations de connexion n\u00e9cessaires.\n\n\nIl suffira dans notre cas de:\n\n\n\n\nCliquer sur \nGuess Schema\n  pour charger le sch\u00e9ma de la base.\n\n\nChanger la requ\u00eate pour qu'elle soit comme suit:\n\n\n\n\nSELECT * FROM `user` where id\n=\n+\nglobalMap\n.\nget\n(\ngetUsers.from\n)\n+\n and id\n=\n+\nglobalMap\n.\nget\n(\ngetUsers.to\n)\n\n\n\n\n\n\n\nRemarque\n\n\nglobalMap est une variable globale permettant de stocker les informations de la requ\u00eate, comme par exemple ses param\u00e8tres.\n\n\n\n\nConfiguration de tXMLMap\n\n\nCliquer deux fois sur la \ntXMLMap\n pour la configurer.\n\n\n\n\nDans la colonne de droite, ajouter (si ce n'est d\u00e9j\u00e0 fait) une colonne intitul\u00e9e \nbody\n dont le type est \nDocument\n.\n\n\nCette colonne contient un \u00e9l\u00e9ment \nroot\n. Renommer cet \u00e9l\u00e9ment pour \nusers\n.\n\n\nAjouter un sous-\u00e9l\u00e9ment \u00e0 \nusers\n appel\u00e9 \nuser\n.\n\n\nD\u00e9finir cet \u00e9l\u00e9ment comme \nloop Element\n.\n\n\nGlisser-d\u00e9placer l'id de la colonne en entr\u00e9e vers le \nuser\n. Cr\u00e9ez-le comme attribut du noeud cible.\n\n\nDe m\u00eame pour le \nfirstname\n et \nlastname\n, qui seront, eux, des sous-\u00e9l\u00e9ments du noeud \nuser\n.\n\n\nDans la colonne de droite, cliquer sur la petite clef \u00e0 molette (\n). Mettre la valeur de \"All in one\" \u00e0 \ntrue\n. Cela permettra \u00e0 toutes les donn\u00e9es XML d'\u00eatre \u00e9crites dans un seul flux.\n\n\n\n\nLa configuration finale sera donc comme suit:\n\n\n\n\n\n\nIndication\n\n\nLa configuration pr\u00e9c\u00e9dente va g\u00e9n\u00e9rer une r\u00e9ponse de la forme suivante:\n\n\nusers\n\n  \nuser\n \nid=\n1\n\n    \nfirstname\n flen \n/firstname\n\n    \nlastname\n fouleni \n/lastname\n\n  \n/user\n\n  \nuser\n \nid=\n2\n\n    \nfirstname\n flena \n/firstname\n\n    \nlastname\n foulenia \n/lastname\n\n  \n/user\n\n\nusers\n\n\n\n\n\n\n\nLes autres composants devront rester tels qu'ils sont par d\u00e9faut. Il suffira maintenant de lancer le service, en cliquant sur \nEx\u00e9cuter\n.\n\n\nTester le Service\n\n\nDans un navigateur\n\n\nPour tester le service, il suffit d'ouvrir un navigateur, et de taper la requ\u00eate de votre choix.\n\n\nPar exemple, la requ\u00eate suivante : \nhttp://localhost:8088/users?from=2\nto=4\n donnera:\n\n\n  \nusers\n\n      \nuser\n \nid=\n2\n\n          \nfirstname\nSouad\n/firstname\n\n          \nlastname\nMezghenni\n/lastname\n\n      \n/user\n\n      \nuser\n \nid=\n3\n\n          \nfirstname\nMourad\n/firstname\n\n          \nlastname\nLahwel\n/lastname\n\n      \n/user\n\n      \nuser\n \nid=\n4\n\n          \nfirstname\nMonia\n/firstname\n\n          \nlastname\nLandolsi\n/lastname\n\n      \n/user\n\n  \n/users\n\n\n\nSi aucun param\u00e8tre n'est indiqu\u00e9: \nhttp://localhost:8088/users\n cela donnera:\n\n\n  \nusers\n\n      \nuser\n \nid=\n1\n\n          \nfirstname\nAhmed\n/firstname\n\n          \nlastname\nRamzi\n/lastname\n\n      \n/user\n\n      \nuser\n \nid=\n2\n\n          \nfirstname\nSouad\n/firstname\n\n          \nlastname\nMezghenni\n/lastname\n\n      \n/user\n\n      \nuser\n \nid=\n3\n\n          \nfirstname\nMourad\n/firstname\n\n          \nlastname\nLahwel\n/lastname\n\n      \n/user\n\n  \n/users\n\n\n\n\n\nAvec SOAPUI\n\n\nTester le service SOAP\n\n\nIl est possible de tester votre service REST avec \nSOAPUI\n.\n\n\n\n\nLancer SOAPUI\n\n\nCliquer sur l'ic\u00f4ne REST en haut de la fen\u00eatre principale\n\n\nEntrer l'URI que vous d\u00e9sirez tester: \nhttp://localhost:8088/users?from=2\nto=4\n\n\nLa fen\u00eatre suivante devrait appara\u00eetre:\n\n\n\n\n\n\n\n\nCliquer sur la fl\u00e8che verte. Le r\u00e9sultat devra ressembler au suivant:\n\n\n\n\n\n\nConsommateur du WebService REST\n\n\nPour cr\u00e9er un consommateur pour le web service REST avec Talend, il suffit de cr\u00e9er le Job suivant:\n\n\n\n\nConfigurer le \ntRestClient\n comme suit:\n\n\n\n\nEx\u00e9cuter. Le r\u00e9sultat devrait ressembler \u00e0 ceci:", 
            "title": "TP1"
        }, 
        {
            "location": "/tp1/#tp1-services-web-rest-et-soap-avec-talend", 
            "text": "", 
            "title": "TP1 - Services Web REST et SOAP avec Talend"
        }, 
        {
            "location": "/tp1/#objectifs-du-tp", 
            "text": "Cr\u00e9ation et consommation de web services SOAP et REST en utilisant l'outil Talend.", 
            "title": "Objectifs du TP"
        }, 
        {
            "location": "/tp1/#outils-et-versions", 
            "text": "Talend Open Studio for ESB  Version: 6.3.0  Java  Version 1.8.0_121  MySQL  Version 14.14 Distrib 5.6.34  SOAPUI  Version 5.3.0", 
            "title": "Outils et Versions"
        }, 
        {
            "location": "/tp1/#talend-esb", 
            "text": "Talend ESB est une solution l\u00e9g\u00e8re, robuste et modulaire pour la cr\u00e9ation de services\nweb s\u00e9curis\u00e9s ainsi que pour l\u2019int\u00e9gration d\u2019applications nouvelles ou existantes.\nTalend participe au d\u00e9veloppement des composants ESB \u00e0 travers la communaut\u00e9\nApache. Il collabore avec un grand nombre de d\u00e9veloppeurs de la communaut\u00e9 Apache\net a fait plusieurs contributions aux projets Apache.\nTalend fournit:   Un courtier de messages \u00e0 haute performance.  Des options de d\u00e9ploiement flexibles  Des outils de d\u00e9veloppement pour Eclipse  Une interface utilisateur pour l\u2019int\u00e9gration et la m\u00e9diation d\u2019applications  Support pour les services web SOAP et REST  La m\u00e9diation et le routage  Support pour le failover, le monitoring et la s\u00e9curit\u00e9   L\u2019environnement d\u2019ex\u00e9cution standard de Talend ESB est un conteneur OSGi.\nL\u2019impl\u00e9mentation OSGi fournie avec Talend ESB est Apache Karaf, avec Eclipse Equinox\ncomme environnement d\u2019ex\u00e9cution OSGi. Elle fournit un conteneur l\u00e9ger dans lequel les\ndiff\u00e9rents composants et applications peuvent \u00eatre d\u00e9ploy\u00e9es.", 
            "title": "Talend ESB"
        }, 
        {
            "location": "/tp1/#talend-open-studio-for-esb", 
            "text": "Talend Open Studio for ESB (TOS-ESB) fournit une interface graphique de\nd\u00e9veloppement pour impl\u00e9menter, compiler, tester et publier des services Web Java, des\napplications REST, des services de donn\u00e9es et des routes de messages.\nLe d\u00e9ploiement d\u2019applications avec TOS-ESB utilise principalement les trois blocs\nrepr\u00e9sent\u00e9s dans cette figure:    Le bloc bleu repr\u00e9sente l\u2019API Talend Studio, o\u00f9 il est possible d\u2019int\u00e9grer des\ndonn\u00e9es, des services ou des applications  Les blocs rouges repr\u00e9sentent un ou plusieurs environnements d\u2019ex\u00e9cution Talend\nd\u00e9ploy\u00e9s dans votre syst\u00e8me d\u2019information. Il vous permet de d\u00e9ployer et\nd\u2019ex\u00e9cuter les Jobs, les routes et les services cr\u00e9\u00e9s dans Talend Studio. Il est\npossible d\u2019avoir plusieurs environnements d\u2019ex\u00e9cution, entre lesquels vous pouvez\nbasculer gr\u00e2ce \u00e0 Talend Service Locator.  Le bloc orange est une base de donn\u00e9es de monitoring, permettant de stocker les\ninformations d\u2019ex\u00e9cution des processus et de l\u2019activit\u00e9 des services.   L\u2019interface utilisateur de TOS-ESB se pr\u00e9sente comme suit:      Composant  Fonctionnalit\u00e9       Le traditionnel  Repository  contenant vos Jobs, services, fichiers, routes\u2026     La fen\u00eatre principale, repr\u00e9sentant graphiquement la composition de vos jobs et routes     La fen\u00eatre contenant les propri\u00e9t\u00e9s, la console d\u2019ex\u00e9cution\u2026     La palette des composants \u00e0 utiliser     Les onglets pour le choix de la perspective \u00e0 utiliser", 
            "title": "Talend Open Studio for ESB"
        }, 
        {
            "location": "/tp1/#service-web-soap-helloworld", 
            "text": "Nous ne pouvons pas configurer un ESB avant de savoir cr\u00e9er, d\u00e9ployer et ex\u00e9cuter des\nservices web avec les outils Talend ESB. Nous allons donc commencer avec le\ntraditionnel Hello World. Pour cela, il faut commencer par cr\u00e9er un projet de votre choix.\nDans toute cette partie, nous nous trouverons dans la perspective Integration.", 
            "title": "Service Web SOAP : Helloworld"
        }, 
        {
            "location": "/tp1/#creer-le-service-soap", 
            "text": "Pour cr\u00e9er un nouveau service de type SOAP:   Clic-droit sur  Services  de votre Repository, et choisir  Create Service . Appeler le\nservice  HelloWorldService . Cliquer sur Suivant.  On vous propose soit de cr\u00e9er un nouveau WSDL, soit de choisir un WSDL existant. Dans notre cas, nous cr\u00e9ons un nouveau WSDL. Cliquer sur Terminer.  Un service simple qui re\u00e7oit une cha\u00eene de caract\u00e8res et en produit une autre est\ncr\u00e9\u00e9. Une vue graphique de son WSDL s\u2019affiche.", 
            "title": "Cr\u00e9er le service SOAP"
        }, 
        {
            "location": "/tp1/#configurer-le-service-soap", 
            "text": "Pour pouvoir configurer votre service, il faut cr\u00e9er un Job. Mais d\u2019abord:   Importer le WSDL de votre service dans votre repository. Pour cela, clic droit sur HelloWorldService , et choisir  Importer les sch\u00e9mas WSDL . Vous retrouverez votre\nWSDL dans la partie  Metadonn\u00e9es -  Fichier XML .  Cr\u00e9er un nouveau Job pour votre service. Pour cela, clic-droit sur l\u2019op\u00e9ration  HelloWorldServiceOperation  (sous Services) et choisir  Assign Job .  Modifier votre Job pour qu\u2019il ait l\u2019allure suivante (Le  tLogRow  nous permettra\nd\u2019afficher le r\u00e9sultat du service ex\u00e9cut\u00e9 sur la console avant de l\u2019envoyer au\nconsommateur):      Configurer votre tXMLMap pour que le  in  de la requ\u00eate soit transmise au  out  de la\nr\u00e9ponse, en lui concat\u00e9nant le c\u00e9l\u00e8bre \"Hello\". Pour cela:   Double clic sur votre XML Map.  Clic-droit sur  payload  de l\u2019entr\u00e9e, et cliquer sur  Import from Repository .  Choisir le  HelloWorldServiceOperationRequest  correspondant au fichier WSDL que vous avez g\u00e9n\u00e9r\u00e9.  Refaire les m\u00eames \u00e9tapes pour le payload de la sortie, en choisissant  HelloWorldServiceOperationResponse .  Relier le  in  de la requ\u00eate avec le  out  de la r\u00e9ponse (cr\u00e9er l\u2019entr\u00e9e comme sous-\u00e9l\u00e9ment de la r\u00e9ponse)  Modifier l\u2019expression du  out  en ajoutant la cha\u00eene  \u201cHello \u201c  avant la valeur  in  de l\u2019entr\u00e9e.  Le r\u00e9sultat de la XMLMap devrait ressembler \u00e0 ce qui suit:  Sauvegarder et quitter.     Lancer votre Job (cela permettra de publier votre service web sur le port 8090).\nV\u00e9rifier que votre fichier WSDL existe bien.", 
            "title": "Configurer le service SOAP"
        }, 
        {
            "location": "/tp1/#tester-le-service-soap", 
            "text": "Il est possible de tester votre service de plusieurs mani\u00e8res. L'une d'elles est d'utiliser un outil l\u00e9ger de test appel\u00e9  SOAPUI .   Lancer SOAPUI  Cliquer sur l'ic\u00f4ne SOAP en haut de la fen\u00eatre principale  Donner un nom au projet (par exemple Helloworld) et entrer l'adresse du fichier WSDL du service, comme suit:     Double cliquer sur la requ\u00eate g\u00e9n\u00e9r\u00e9e, et remplir le  ?  par un nom de votre choix.  Cliquer sur la fl\u00e8che verte. Le r\u00e9sultat devra ressembler au suivant:", 
            "title": "Tester le service SOAP"
        }, 
        {
            "location": "/tp1/#consommateur-du-webservice-soap", 
            "text": "Nous allons maintenant cr\u00e9er un consommateur pour notre service avec talend open studio. Pour cela:   Cr\u00e9er un nouveau Job, que vous appellerez  HelloWorldServiceConsumer .  Concevez votre job de mani\u00e8re \u00e0 ce qu\u2019il ait l\u2019allure suivante:   Voici les r\u00f4les des \u00e9l\u00e9ments que vous avez ajout\u00e9:  * tFixedFlowInput : d\u00e9finir les entr\u00e9es \u00e0 envoyer \u00e0 votre service\n* tXMLMap : associer les entr\u00e9es d\u00e9finies aux entr\u00e9es du service\n* tESBConsumer : consommateur du service\n* tLogRow: afficher les r\u00e9ponses et/ou les fautes (s\u2019il y\u2019en a)    Configurer votre composant  tFixedFlowInput . Pour cela:   Cliquer sur  Modifier le sch\u00e9ma  et ajouter une colonne appel\u00e9e  Nom  de type  String .  Utiliser une  Inline Table  pour ajouter les trois cha\u00eenes en entr\u00e9e: \u201cAlice\u201d, \u201cBob\u201d et \u201cChuck\u201d.     Configurer votre  tESBConsumer  en lui donnant comme WSDL celui du service que\nvous avez cr\u00e9\u00e9. V\u00e9rifiez bien que le Endpoint soit sur le port 8090.   Configurer votre  tXMLMap  pour que la variable  Nom  soit associ\u00e9e au  in  de votre\nservice.  Ex\u00e9cuter le Job, et observez le r\u00e9sultat. Votre console devrait afficher le r\u00e9sultat suivant:", 
            "title": "Consommateur du WebService SOAP"
        }, 
        {
            "location": "/tp1/#service-web-rest-interrogation-dune-base-de-donnees", 
            "text": "Nous allons maintenant montrer comment exposer un service REST pour interroger une base de donn\u00e9es.", 
            "title": "Service Web REST : Interrogation d'une base de donn\u00e9es"
        }, 
        {
            "location": "/tp1/#creation-de-la-base-de-donnees", 
            "text": "Nous allons commencer par cr\u00e9er une base de donn\u00e9es (MySQL dans mon cas), appel\u00e9e  eservices-tp1  avec une table, que nous appellerons  user . Cette table contient les champs  id ,  firstname  et  lastname . Remplir ensuite la base \u00e0 votre guise, de mani\u00e8re \u00e0 avoir au moins 4 entr\u00e9es.  Elle devra ressembler \u00e0 ce qui suit:", 
            "title": "Cr\u00e9ation de la base de donn\u00e9es"
        }, 
        {
            "location": "/tp1/#ajout-de-la-connexion-a-la-base-avec-talend", 
            "text": "Pour configurer une connexion \u00e0 cette base de donn\u00e9es avec Talend, suivre les \u00e9tapes suivantes:   Dans les M\u00e9tadonn\u00e9es, sous  Connexions aux bases de donn\u00e9es , clic-droit, puis choisir:  Cr\u00e9er une connexion .  Configurer votre connexion. Voici un exemple:     Une fois la connexion cr\u00e9\u00e9e, importer son sch\u00e9ma. Pour cela, clic-droit sur Metadonn\u00e9es -  Connexions... -    et choisir:  R\u00e9cup\u00e9rer le sch\u00e9ma .  S\u00e9lectionner la table  user , et v\u00e9rifier que les champs sont bien charg\u00e9s dans la partie Sch\u00e9ma.", 
            "title": "Ajout de la connexion \u00e0 la base avec Talend"
        }, 
        {
            "location": "/tp1/#creation-du-service-rest", 
            "text": "Nous allons maintenant cr\u00e9er le service REST. Pour cela, cr\u00e9er un nouveau job, qu'on appellera  DBService , puis glisser les composants suivants:   tRestRequest  : Pour d\u00e9finir la requ\u00eate REST que le client doit appeler  user  : Table de la base de donn\u00e9es. Dans la nouvelle connexion \u00e0 la base de donn\u00e9es que vous avez cr\u00e9\u00e9, sous  Sch\u00e9mas des tables , glisser la table  user  vers le Job, puis choisir tMySQLInput dans la fen\u00eatre de choix qui appara\u00eet.    Remarque  Je choisis  tMySQLInput  car, dans mon cas, c'est une base de donn\u00e9es MySQL, et je veux juste lire son contenu, je vais donc y acc\u00e9der en entr\u00e9e (d'o\u00f9 le  Input ).    tFlowToIterate  : Pour effectuer une it\u00e9ration sur les donn\u00e9es d'entr\u00e9e et g\u00e9n\u00e8rer des variables globales.  tXMLMap  : Permet de router et transformer les flux entrants de la base de donn\u00e9es vers le r\u00e9sultat de la requ\u00eate.  tRestResponse  : Pour d\u00e9finir la r\u00e9ponse \u00e0 envoyer \u00e0 l'utilisateur suite \u00e0 sa requ\u00eate.  tLogRow  : Pour le log, bien s\u00fbr.   Le job aura l'allure suivante:", 
            "title": "Cr\u00e9ation du service REST"
        }, 
        {
            "location": "/tp1/#configuration-du-service-rest", 
            "text": "Nous d\u00e9sirons configurer le service de mani\u00e8re \u00e0 ce que, quand un consommateur appelle l'URI: http://localhost:8088/users?from=1 to=3 , le service retourne une r\u00e9ponse contenant les utilisateurs (id, nom et pr\u00e9nom) de la base de donn\u00e9es dont les ids figurent entre 1 et 3.", 
            "title": "Configuration du service REST"
        }, 
        {
            "location": "/tp1/#configuration-de-trestrequest", 
            "text": "tRestRequest devra \u00eatre configur\u00e9 comme suit:   La valeur de  Endpoint URL  devra \u00eatre:  http://localhost:8088/users  Si vous avez connect\u00e9 le tRestRequest avec le tFlowToIterate avec un lien appel\u00e9  getUsers , vous devriez le retrouver dans la case  REST API Mapping . Sinon, cr\u00e9ez-le.  Garder les informations par d\u00e9faut de ce mapping (m\u00e9thode GET, URI /, Produit XML ou JSON).  En cliquant sur  getUsers , un bouton avec trois petits points appara\u00eet. Cliquez dessus.   Ajouter les deux colonnes  from  et  to  repr\u00e9sentant les deux param\u00e8tres de la requ\u00eate. Prenez soin \u00e0 ce que:   Leur type soit  int  Leurs valeurs par d\u00e9faut soient respectivement 1 et 3.    Remarque  Ces valeurs seront utilis\u00e9es dans le cas o\u00f9 le consommateur n'introduit pas de param\u00e8tres.    Leur commentaire ait la valeur:  query    Remarque  Cela indique que ces champs sont des param\u00e8tres de requ\u00eate, pas d\u00e9finies dans le Path.", 
            "title": "Configuration de tRestRequest"
        }, 
        {
            "location": "/tp1/#configuration-de-user", 
            "text": "Puisque le composant  user  a \u00e9t\u00e9 cr\u00e9\u00e9 \u00e0 partir de la connexion \u00e0 votre base MySQL, il contient d\u00e9j\u00e0 les informations de connexion n\u00e9cessaires.  Il suffira dans notre cas de:   Cliquer sur  Guess Schema   pour charger le sch\u00e9ma de la base.  Changer la requ\u00eate pour qu'elle soit comme suit:   SELECT * FROM `user` where id = + globalMap . get ( getUsers.from ) +  and id = + globalMap . get ( getUsers.to )    Remarque  globalMap est une variable globale permettant de stocker les informations de la requ\u00eate, comme par exemple ses param\u00e8tres.", 
            "title": "Configuration de user"
        }, 
        {
            "location": "/tp1/#configuration-de-txmlmap", 
            "text": "Cliquer deux fois sur la  tXMLMap  pour la configurer.   Dans la colonne de droite, ajouter (si ce n'est d\u00e9j\u00e0 fait) une colonne intitul\u00e9e  body  dont le type est  Document .  Cette colonne contient un \u00e9l\u00e9ment  root . Renommer cet \u00e9l\u00e9ment pour  users .  Ajouter un sous-\u00e9l\u00e9ment \u00e0  users  appel\u00e9  user .  D\u00e9finir cet \u00e9l\u00e9ment comme  loop Element .  Glisser-d\u00e9placer l'id de la colonne en entr\u00e9e vers le  user . Cr\u00e9ez-le comme attribut du noeud cible.  De m\u00eame pour le  firstname  et  lastname , qui seront, eux, des sous-\u00e9l\u00e9ments du noeud  user .  Dans la colonne de droite, cliquer sur la petite clef \u00e0 molette ( ). Mettre la valeur de \"All in one\" \u00e0  true . Cela permettra \u00e0 toutes les donn\u00e9es XML d'\u00eatre \u00e9crites dans un seul flux.   La configuration finale sera donc comme suit:    Indication  La configuration pr\u00e9c\u00e9dente va g\u00e9n\u00e9rer une r\u00e9ponse de la forme suivante:  users \n   user   id= 1 \n     firstname  flen  /firstname \n     lastname  fouleni  /lastname \n   /user \n   user   id= 2 \n     firstname  flena  /firstname \n     lastname  foulenia  /lastname \n   /user  users    Les autres composants devront rester tels qu'ils sont par d\u00e9faut. Il suffira maintenant de lancer le service, en cliquant sur  Ex\u00e9cuter .", 
            "title": "Configuration de tXMLMap"
        }, 
        {
            "location": "/tp1/#tester-le-service", 
            "text": "", 
            "title": "Tester le Service"
        }, 
        {
            "location": "/tp1/#dans-un-navigateur", 
            "text": "Pour tester le service, il suffit d'ouvrir un navigateur, et de taper la requ\u00eate de votre choix.  Par exemple, la requ\u00eate suivante :  http://localhost:8088/users?from=2 to=4  donnera:     users \n       user   id= 2 \n           firstname Souad /firstname \n           lastname Mezghenni /lastname \n       /user \n       user   id= 3 \n           firstname Mourad /firstname \n           lastname Lahwel /lastname \n       /user \n       user   id= 4 \n           firstname Monia /firstname \n           lastname Landolsi /lastname \n       /user \n   /users  \nSi aucun param\u00e8tre n'est indiqu\u00e9:  http://localhost:8088/users  cela donnera:     users \n       user   id= 1 \n           firstname Ahmed /firstname \n           lastname Ramzi /lastname \n       /user \n       user   id= 2 \n           firstname Souad /firstname \n           lastname Mezghenni /lastname \n       /user \n       user   id= 3 \n           firstname Mourad /firstname \n           lastname Lahwel /lastname \n       /user \n   /users", 
            "title": "Dans un navigateur"
        }, 
        {
            "location": "/tp1/#avec-soapui", 
            "text": "", 
            "title": "Avec SOAPUI"
        }, 
        {
            "location": "/tp1/#tester-le-service-soap_1", 
            "text": "Il est possible de tester votre service REST avec  SOAPUI .   Lancer SOAPUI  Cliquer sur l'ic\u00f4ne REST en haut de la fen\u00eatre principale  Entrer l'URI que vous d\u00e9sirez tester:  http://localhost:8088/users?from=2 to=4  La fen\u00eatre suivante devrait appara\u00eetre:     Cliquer sur la fl\u00e8che verte. Le r\u00e9sultat devra ressembler au suivant:", 
            "title": "Tester le service SOAP"
        }, 
        {
            "location": "/tp1/#consommateur-du-webservice-rest", 
            "text": "Pour cr\u00e9er un consommateur pour le web service REST avec Talend, il suffit de cr\u00e9er le Job suivant:   Configurer le  tRestClient  comme suit:   Ex\u00e9cuter. Le r\u00e9sultat devrait ressembler \u00e0 ceci:", 
            "title": "Consommateur du WebService REST"
        }, 
        {
            "location": "/tp2/", 
            "text": "TP2 - Processus M\u00e9tier avec Activiti", 
            "title": "TP2"
        }, 
        {
            "location": "/tp2/#tp2-processus-metier-avec-activiti", 
            "text": "", 
            "title": "TP2 - Processus M\u00e9tier avec Activiti"
        }, 
        {
            "location": "/tp3/", 
            "text": "TP3 - Mise en Place d\u2019un ESB avec Talend ESB", 
            "title": "TP3"
        }, 
        {
            "location": "/tp3/#tp3-mise-en-place-dun-esb-avec-talend-esb", 
            "text": "", 
            "title": "TP3 - Mise en Place d\u2019un ESB avec Talend ESB"
        }, 
        {
            "location": "/tp4/", 
            "text": "TP4 - Microservices", 
            "title": "TP4"
        }, 
        {
            "location": "/tp4/#tp4-microservices", 
            "text": "", 
            "title": "TP4 - Microservices"
        }, 
        {
            "location": "/tp5/", 
            "text": "TP5 - API Management avec Atom et Anypoint", 
            "title": "TP5"
        }, 
        {
            "location": "/tp5/#tp5-api-management-avec-atom-et-anypoint", 
            "text": "", 
            "title": "TP5 - API Management avec Atom et Anypoint"
        }
    ]
}